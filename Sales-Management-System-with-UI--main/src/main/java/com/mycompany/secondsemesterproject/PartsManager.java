/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.secondsemesterproject;

import java.awt.Color;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import java.util.ArrayList;

/**
 *
 * @author User
 */
public class PartsManager extends javax.swing.JFrame {

    /**
     * Creates new form CategoryManager
     */
    Connection con;

    public int userId;
    public int UserRole;
    
    
    
    public PartsManager() {
    
      initComponents();
       ctest cMngr = new ctest();
        try {
            con = cMngr.getConnection();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Store.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Store.class.getName()).log(Level.SEVERE, null, ex);
        }
    PopulatePartsWithDatabase();
        PopulateSuppliersWithDatabase();
        PopulateCategoryWithDatabase();
    }
    
    public PartsManager(int userId, int UserRole) {
        initComponents();
        
        this.userId = userId;
        this.UserRole = UserRole;
        this.setLocationRelativeTo(null);
        ctest cMngr = new ctest();

        try {
            con = cMngr.getConnection();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Store.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Store.class.getName()).log(Level.SEVERE, null, ex);
        }

        PopulatePartsWithDatabase();
        PopulateSuppliersWithDatabase();
        PopulateCategoryWithDatabase();
        OnlyNumbersError.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel24 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        selectedParts = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        OnlyNumbersError = new javax.swing.JLabel();
        deleteParts = new javax.swing.JButton();
        addParts = new javax.swing.JButton();
        EditParts = new javax.swing.JButton();
        partsName = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        supplierId = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        partsQuantity = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        categoryId = new javax.swing.JComboBox<>();

        jLabel24.setText("jLabel20");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jLabel4.setBackground(new java.awt.Color(0, 0, 0));
        jLabel4.setFont(new java.awt.Font("Leelawadee UI Semilight", 0, 18)); // NOI18N
        jLabel4.setText("Parts Name");

        jPanel3.setBackground(new java.awt.Color(0, 102, 102));

        jLabel6.setFont(new java.awt.Font("Leelawadee UI Semilight", 0, 45)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Parts Manager");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 359, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(175, 175, 175))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(34, Short.MAX_VALUE)
                .addComponent(jLabel6)
                .addGap(31, 31, 31))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 24, Short.MAX_VALUE))
        );

        OnlyNumbersError.setForeground(new java.awt.Color(153, 0, 0));

        deleteParts.setText("Delete");
        deleteParts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletePartsActionPerformed(evt);
            }
        });

        addParts.setText("Add Parts");
        addParts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPartsActionPerformed(evt);
            }
        });

        EditParts.setText("Edit");
        EditParts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditPartsActionPerformed(evt);
            }
        });

        jLabel5.setBackground(new java.awt.Color(0, 0, 0));
        jLabel5.setFont(new java.awt.Font("Leelawadee UI Semilight", 0, 18)); // NOI18N
        jLabel5.setText("Supplier Name");

        jLabel7.setBackground(new java.awt.Color(0, 0, 0));
        jLabel7.setFont(new java.awt.Font("Leelawadee UI Semilight", 0, 18)); // NOI18N
        jLabel7.setText("Quantity");

        jLabel8.setBackground(new java.awt.Color(0, 0, 0));
        jLabel8.setFont(new java.awt.Font("Leelawadee UI Semilight", 0, 18)); // NOI18N
        jLabel8.setText("Category Name");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(207, 207, 207)
                        .addComponent(OnlyNumbersError))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addParts, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(jLabel7))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(60, 60, 60)
                                .addComponent(deleteParts, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(partsQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(partsName, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(18, 18, 18)
                                .addComponent(supplierId, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(categoryId, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(61, 61, 61)
                        .addComponent(selectedParts, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(45, 45, 45)
                        .addComponent(EditParts, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(36, 36, 36))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(partsName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(supplierId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(25, 25, 25))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(partsQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8)
                            .addComponent(categoryId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addParts)
                    .addComponent(deleteParts)
                    .addComponent(EditParts)
                    .addComponent(selectedParts, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(OnlyNumbersError)
                .addContainerGap(48, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //delete category
    private void deletePartsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletePartsActionPerformed

        int selectedIndex = selectedParts.getSelectedIndex(); // Get selected index

        int PartsId = partsIds.get(selectedIndex); // Get ItemID corresponding to the selected index

        // If the item is not used, delete it from the Items table
        String deleteQuery = "DELETE FROM Parts WHERE PartID = ?";
        try (PreparedStatement deleteStmt = con.prepareStatement(deleteQuery)) {
            deleteStmt.setInt(1, PartsId);
            int rowsAffected = deleteStmt.executeUpdate();
            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(this, "The Part deleted successfully!");
                
                     createReport(8,PartsId, userId,"part removed from system");
                supplierId.setSelectedIndex(-1);
                PopulatePartsWithDatabase(); // Refresh the combo box
            } else {
                JOptionPane.showMessageDialog(this, "Part Id not found in the parts table!");
            }
        } catch (SQLException ex) {
            Logger.getLogger(PartsManager.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error deleting category!");
        }

    }//GEN-LAST:event_deletePartsActionPerformed

    
    
    
    
    
       public void createReport(int reportTypeID, Integer itemID, int performedBy, String notes) throws SQLException {
        String query = "INSERT INTO Reports (ReportTypeID, ItemID, PerformedBy, Timestamp, Notes) VALUES (?, ?, ?, GETDATE(), ?)";

        PreparedStatement stmt = con.prepareStatement(query);

        stmt.setInt(1, reportTypeID);

        stmt.setNull(2, java.sql.Types.INTEGER);


        stmt.setInt(3, performedBy);
        stmt.setString(4, notes);

        stmt.executeUpdate();
        JOptionPane.showMessageDialog(this, "Report created successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
    }
    
       private int getPartId(String itemName) throws SQLException {
        String query = "SELECT PartID FROM Parts WHERE PartName = ?";
        try (PreparedStatement stmt = con.prepareStatement(query)) {
            stmt.setString(1, itemName);
            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    return rs.getInt("PartID");
                } else {
                    throw new SQLException("Condition not found: " + itemName);
                }
            }
        }
    }
            
            
        
    
    
    
    //add category
    private void addPartsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPartsActionPerformed
        // Get input values
        String partName = partsName.getText().trim();
        String quantityText = partsQuantity.getText().trim();

        // Validate input
        if (partName.isEmpty() || quantityText.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Part name and quantity cannot be empty!");
            return;
        }

        if (!quantityText.matches("\\d+")) {
            JOptionPane.showMessageDialog(this, "Quantity must be a valid number!");
            return;
        }

        int quantity = Integer.parseInt(quantityText);

        int selectedSupplierIndex = supplierId.getSelectedIndex();
        if (selectedSupplierIndex == -1) {
            JOptionPane.showMessageDialog(this, "Please select a supplier!");
            return;
        }

        int selectedCategoryIndex = categoryId.getSelectedIndex();
        if (selectedCategoryIndex == -1) {
            JOptionPane.showMessageDialog(this, "Please select a category!");
            return;
        }

        int supplierIdValue = supplierIds.get(selectedSupplierIndex); // Get the selected supplier's ID
        int categoryIdValue = categoryIds.get(selectedSupplierIndex); // Get the selected supplier's ID

        // Insert the part into the database
        String query = "INSERT INTO Parts (PartName, CategoryID, SupplierID, Quantity) VALUES (?, ?, ?, ?)";
        try (PreparedStatement stmt = con.prepareStatement(query)) {
            stmt.setString(1, partName);
            stmt.setInt(2, categoryIdValue);
            stmt.setInt(3, supplierIdValue);
            stmt.setInt(4, quantity);

            int rowsAffected = stmt.executeUpdate();
            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(this, "Part added successfully!");
                
                
                PopulatePartsWithDatabase(); 
int partId = getPartId(partName);
                    createReport(8,partId, userId,"part added to system");
                
// Refresh the combo box
                partsName.setText("");
                partsQuantity.setText("");
                supplierId.setSelectedIndex(-1);
                
                
                
                
            
                
                
            } else {
                JOptionPane.showMessageDialog(this, "Failed to add part!");
            }
        } catch (SQLException ex) {
            Logger.getLogger(PartsManager.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error adding part to the database!");
        }


    }//GEN-LAST:event_addPartsActionPerformed

    private boolean isEditMode = false; // Tracks if we are in edit mode

    //edit category
    private void EditPartsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditPartsActionPerformed
    int selectedIndex = selectedParts.getSelectedIndex(); // Get selected index
        if (selectedIndex == -1) {
            JOptionPane.showMessageDialog(this, "Please select a part to edit!");
            return;
        }

        int selectedPartId = partsIds.get(selectedIndex); // Get the selected PartID

        if (!isEditMode) {
            // Enter edit mode
            loadPartDetails(selectedPartId); // Load details into fields
            isEditMode = true;
            EditParts.setText("Confirm Edit"); // Change button text to indicate confirmation
            addParts.setEnabled(false); // Disable Add button
            deleteParts.setEnabled(false); // Disable Delete button
            selectedParts.setEnabled(false); // Disable combo box
        } else {
            // Confirm the edit
            int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to save changes?", "Confirm Edit", JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                // Update the part in the database
                String partName = partsName.getText().trim();
                String quantityText = partsQuantity.getText().trim();

                if (partName.isEmpty() || quantityText.isEmpty() || !quantityText.matches("\\d+")) {
                    JOptionPane.showMessageDialog(this, "Please fill all fields correctly!");
                    return;
                }

                int quantity = Integer.parseInt(quantityText);
                int supplierIdValue = supplierIds.get(supplierId.getSelectedIndex());
                int categoryIdValue = categoryIds.get(categoryId.getSelectedIndex());

                String updateQuery = "UPDATE Parts SET PartName = ?, Quantity = ?, SupplierID = ?, CategoryID = ? WHERE PartID = ?";
                try (PreparedStatement stmt = con.prepareStatement(updateQuery)) {
                    stmt.setString(1, partName);
                    stmt.setInt(2, quantity);
                    stmt.setInt(3, supplierIdValue);
                    stmt.setInt(4, categoryIdValue);
                    stmt.setInt(5, selectedPartId);

                    int rowsAffected = stmt.executeUpdate();
                    if (rowsAffected > 0) {
                        JOptionPane.showMessageDialog(this, "Part updated successfully!");
                        
                        PopulatePartsWithDatabase(); 
int partId = getPartId(partName);
                        createReport(16,partId , userId, "parts edited");

                    } else {
                        JOptionPane.showMessageDialog(this, "Failed to update part!");
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(PartsManager.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this, "Error updating part in the database!");
                }
            }

            // Exit edit mode
            isEditMode = false;
            EditParts.setText("Edit"); // Reset button text
            addParts.setEnabled(true); // Enable Add button
            deleteParts.setEnabled(true); // Enable Delete button
            selectedParts.setEnabled(true); // Re-enable combo box
            partsName.setText("");
            partsQuantity.setText("");
            supplierId.setSelectedIndex(-1);
            selectedParts.setSelectedIndex(-1);
        }

    }//GEN-LAST:event_EditPartsActionPerformed

    private void loadPartDetails(int partId) {
        String query = """
        SELECT PartName, Quantity, SupplierID, CategoryID
        FROM Parts
        WHERE PartID = ?
    """;

        try (PreparedStatement stmt = con.prepareStatement(query)) {
            stmt.setInt(1, partId);
            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    partsName.setText(rs.getString("PartName"));
                    partsQuantity.setText(String.valueOf(rs.getInt("Quantity")));
                    supplierId.setSelectedIndex(supplierIds.indexOf(rs.getInt("SupplierID")));
                    categoryId.setSelectedIndex(categoryIds.indexOf(rs.getInt("CategoryID")));
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(PartsManager.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error loading part details!");
        }
    }

    private ArrayList<Integer> partsIds = new ArrayList<>();
    private ArrayList<Integer> supplierIds = new ArrayList<>();
    private ArrayList<Integer> categoryIds = new ArrayList<>();

    //show countries
    public void PopulatePartsWithDatabase() {
        selectedParts.removeAllItems(); // Clear the combo box
        partsIds.clear(); // Clear the ID list

        String query = "SELECT PartID AS ID, PartName FROM Parts";
        try (PreparedStatement statement = con.prepareStatement(query); ResultSet resultSet = statement.executeQuery()) {
            while (resultSet.next()) {
                int id = resultSet.getInt("ID"); // ID column (e.g., CategoryID, ConditionID)
                String name = resultSet.getString("PartName"); // Name column (e.g., CategoryName, ConditionName)

                partsIds.add(id); // Store the ID in the ArrayList
                selectedParts.addItem(name); // Add the name to the combo box
            }
        } catch (SQLException ex) {
            Logger.getLogger(Items.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error populating combo box!");
        }
    }

    //show items
    private void PopulateSuppliersWithDatabase() {
        supplierId.removeAllItems(); // Clear the combo box
        supplierIds.clear(); // Clear the ID list

        String query = "SELECT SupplierID AS ID, SupplierName FROM Suppliers";
        try (PreparedStatement statement = con.prepareStatement(query); ResultSet resultSet = statement.executeQuery()) {
            while (resultSet.next()) {
                int id = resultSet.getInt("ID"); // ID column (e.g., CategoryID, ConditionID)
                String name = resultSet.getString("SupplierName"); // Name column (e.g., CategoryName, ConditionName)

                supplierIds.add(id); // Store the ID in the ArrayList
                supplierId.addItem(name); // Add the name to the combo box
            }
        } catch (SQLException ex) {
            Logger.getLogger(Items.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error populating combo box!");
        }
    }

    //show categories:
    public void PopulateCategoryWithDatabase() {
        categoryId.removeAllItems(); // Clear existing items
        categoryIds.clear(); // Clear existing IDs
        String sql = "SELECT CategoryID, CategoryName FROM Categories"; // Select both ItemID and ItemName
        try (PreparedStatement p = con.prepareStatement(sql)) {
            ResultSet resultSet = p.executeQuery();
            while (resultSet.next()) {
                int itemId = resultSet.getInt("CategoryID");
                String itemName = resultSet.getString("CategoryName");

                // Store the ID and add the name to the combo box
                categoryIds.add(itemId);
                categoryId.addItem(itemName);
            }
        } catch (SQLException ex) {
            Logger.getLogger(Store.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error populating combo box!");
        }
    }

    //check on category if it holds an item
    private boolean isCategoryInTable(int categoryId, String tableName) {
        String query = "SELECT COUNT(*) AS Count FROM " + tableName + " WHERE CategoryID = ?";
        try (PreparedStatement stmt = con.prepareStatement(query)) {
            stmt.setInt(1, categoryId);
            try (ResultSet resultSet = stmt.executeQuery()) {
                if (resultSet.next()) {
                    return resultSet.getInt("Count") > 0; // Return true if the count is greater than 0
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(PartsManager.class.getName()).log(Level.SEVERE, "Error checking table: " + tableName, ex);
        }
        return false; // Return false if an exception occurs or no rows are found
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PartsManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PartsManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PartsManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PartsManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PartsManager().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton EditParts;
    private javax.swing.JLabel OnlyNumbersError;
    private javax.swing.JButton addParts;
    private javax.swing.JComboBox<String> categoryId;
    private javax.swing.JButton deleteParts;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JTextField partsName;
    private javax.swing.JTextField partsQuantity;
    private javax.swing.JComboBox<String> selectedParts;
    private javax.swing.JComboBox<String> supplierId;
    // End of variables declaration//GEN-END:variables
}
