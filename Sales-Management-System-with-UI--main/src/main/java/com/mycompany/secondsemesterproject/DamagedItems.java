/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.secondsemesterproject;

import com.mycompany.secondsemesterproject.ctest;
import java.awt.Color;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.sql.Date;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Random;

/**
 *
 * @author User
 */
public class DamagedItems extends javax.swing.JFrame {

    /**
     * Creates new form Requester
     */
    public int userID;

    DefaultTableModel myTable = new DefaultTableModel();

    String cols[] = {"Damage ID", "ItemID", "Description", "ReportedDate", "condition ID"};

    //"SELECT DamageID, ItemID, Description, ReportedDate, ConditionID FROM Damage";
    public void PopulateWithDatabase() {
        String query = "SELECT I.ItemName, S.Quantity "
                + "FROM Stock S "
                + "INNER JOIN Items I ON S.ItemID = I.ItemID";
        try (PreparedStatement p = con.prepareStatement(query)) {

            ResultSet resultSet = p.executeQuery();
            while (resultSet.next()) {
                String productName = resultSet.getString("ItemName");
                ProductWanted.addItem(productName);

            }
        } catch (SQLException ex) {
            Logger.getLogger(DamagedItems.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    Connection con;

    public DamagedItems() {

        initComponents();

        this.setLocationRelativeTo(null);
        ctest cMngr = new ctest();

        try {
            con = cMngr.getConnection();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(DamagedItems.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(DamagedItems.class.getName()).log(Level.SEVERE, null, ex);
        }

        PopulateWithDatabase();
        populateConditionComboBox();
        jTable1.setModel(myTable);
        myTable.setColumnIdentifiers(cols);

        try {
            updateJTable();
        } catch (SQLException ex) {
            Logger.getLogger(DamagedItems.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public DamagedItems(int roleID, int userID) {

        initComponents();
        this.userID = userID;

        if (roleID == 2) {

            terminateDamage.setEnabled(false);

            conditionSelection.setEnabled(false);

        } else if (roleID == 3) {
            ProductWanted.setEnabled(false);
            maintenceRequest_btn.setEnabled(false);
            quantityfld.setEnabled(false);

        }

        this.setLocationRelativeTo(null);
        ctest cMngr = new ctest();

        try {
            con = cMngr.getConnection();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(DamagedItems.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(DamagedItems.class.getName()).log(Level.SEVERE, null, ex);
        }

        PopulateWithDatabase();
        populateConditionComboBox();

        jTable1.setModel(myTable);
        myTable.setColumnIdentifiers(cols);

        try {
            updateJTable();
        } catch (SQLException ex) {
            Logger.getLogger(DamagedItems.class.getName()).log(Level.SEVERE, null, ex);
        }

        OnlyNumbersError.setVisible(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel24 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        ProductWanted = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        OnlyNumbersError = new javax.swing.JLabel();
        maintenceRequest_btn = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        quantityfld = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        Date = new javax.swing.JLabel();
        description = new javax.swing.JTextField();
        Date1 = new javax.swing.JLabel();
        terminateDamage = new javax.swing.JButton();
        conditionSelection = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        description1 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();

        jLabel24.setText("jLabel20");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        ProductWanted.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProductWantedActionPerformed(evt);
            }
        });

        jPanel3.setBackground(new java.awt.Color(0, 102, 102));

        jLabel6.setFont(new java.awt.Font("Leelawadee UI Semilight", 0, 45)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Damage Items");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(179, 179, 179)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(34, Short.MAX_VALUE)
                .addComponent(jLabel6)
                .addGap(31, 31, 31))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 24, Short.MAX_VALUE))
        );

        OnlyNumbersError.setForeground(new java.awt.Color(153, 0, 0));

        maintenceRequest_btn.setText("Maintenence Request");
        maintenceRequest_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maintenceRequest_btnActionPerformed(evt);
            }
        });

        jLabel5.setBackground(new java.awt.Color(0, 0, 0));
        jLabel5.setFont(new java.awt.Font("Leelawadee UI Semilight", 0, 18)); // NOI18N
        jLabel5.setText("Quantity");

        quantityfld.setText("jTextField1");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5", "Title 6"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        Date.setBackground(new java.awt.Color(0, 0, 0));
        Date.setFont(new java.awt.Font("Leelawadee UI Semilight", 0, 18)); // NOI18N
        Date.setText("Description");

        description.setText("jTextField1");
        description.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                descriptionActionPerformed(evt);
            }
        });

        Date1.setBackground(new java.awt.Color(0, 0, 0));
        Date1.setFont(new java.awt.Font("Leelawadee UI Semilight", 0, 18)); // NOI18N
        Date1.setText("Item Condition:");

        terminateDamage.setText("Terminate Maintence Request");
        terminateDamage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                terminateDamageActionPerformed(evt);
            }
        });

        conditionSelection.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel7.setBackground(new java.awt.Color(0, 0, 0));
        jLabel7.setFont(new java.awt.Font("Leelawadee UI Semilight", 0, 18)); // NOI18N
        jLabel7.setText("Fix Price");

        description1.setText("jTextField1");
        description1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                description1ActionPerformed(evt);
            }
        });

        jLabel8.setBackground(new java.awt.Color(0, 0, 0));
        jLabel8.setFont(new java.awt.Font("Leelawadee UI Semilight", 0, 18)); // NOI18N
        jLabel8.setText("Product Wanted");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(terminateDamage)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(maintenceRequest_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 680, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(225, 225, 225)
                        .addComponent(conditionSelection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(Date1)
                                        .addGap(90, 90, 90)
                                        .addComponent(OnlyNumbersError))
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel8))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(ProductWanted, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(quantityfld, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(6, 6, 6))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(Date)
                                .addGap(127, 127, 127)
                                .addComponent(description, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(123, 123, 123)
                        .addComponent(jLabel7)
                        .addGap(18, 18, 18)
                        .addComponent(description1, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(43, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(description1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ProductWanted, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(quantityfld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(13, 13, 13)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Date)
                            .addComponent(description, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(OnlyNumbersError)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(Date1)
                                .addComponent(conditionSelection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addComponent(maintenceRequest_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 27, Short.MAX_VALUE)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(terminateDamage)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public boolean checker() {
        boolean checkPassed = true;

        int Quantityl = 0;
        String location = "";

        try {

            Quantityl = Integer.parseInt(quantityfld.getText());
            location = description.getText();

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Please fill all fileds !");
            checkPassed = false;

        }
        return checkPassed;
    }

    private boolean isReportIdExists(int stockid) throws SQLException {
        String query = "SELECT COUNT(*) FROM reports WHERE report_id = ?"; // Replace "Products" with your table name
        try (PreparedStatement stmt = con.prepareStatement(query)) {
            stmt.setInt(1, stockid);
            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    return rs.getInt(1) > 0; // Check if the count is greater than 0
                }
            }
        }
        return false;
    }

    public int generateReportId() throws SQLException {
        Random RANDOM = new Random();
        int reportid;

        do {
            reportid = RANDOM.nextInt(5000 - 1000 + 1) + 1000; // Generate a number in the range 1000-5000
        } while (isReportIdExists(reportid));

        return reportid;
    }

    public void insertReport(int reportid, String reportType, String date, String ItemName) throws SQLException, ParseException {
        // Generate a new report_id

        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        sdf.setLenient(false); // To prevent lenient parsing (e.g., allowing "2024-02-30")

        java.util.Date parsedDate = sdf.parse(date);
        Date sqlDate = new Date(parsedDate.getTime());
        // Insert the report_id into the reports table
        String insertReportQuery = "INSERT INTO reports (report_id, report_types,report_date,itemName) VALUES (?, ?,?,?)";
        try (PreparedStatement stmt = con.prepareStatement(insertReportQuery)) {
            stmt.setInt(1, reportid);

            stmt.setString(2, reportType);
            stmt.setDate(3, sqlDate);
            stmt.setString(4, ItemName);

            stmt.executeUpdate();
        }

    }

    public void insertDamage(int reportid, String date, String ItemName, int item_id, int cost, int condition_id) throws SQLException, ParseException {
        // Generate a new report_id

        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        sdf.setLenient(false); // To prevent lenient parsing (e.g., allowing "2024-02-30")

        java.util.Date parsedDate = sdf.parse(date);
        Date sqlDate = new Date(parsedDate.getTime());
        // Insert the report_id into the reports table
        String insertReportQuery = "INSERT INTO Damage (report_id, item_id, cost, condition_id, damage_date,itemName) VALUES (?, ?,?,?,?,?)";
        try (PreparedStatement stmt = con.prepareStatement(insertReportQuery)) {
            stmt.setInt(1, reportid);
            stmt.setInt(2, item_id);
            stmt.setInt(3, cost);
            stmt.setInt(4, condition_id);

            stmt.setDate(5, sqlDate);
            stmt.setString(6, ItemName);

            stmt.executeUpdate();
        }

    }

    private void updateJTable() throws SQLException {

        myTable.setRowCount(0);
        // Populate the JTable with data from the database
        // Add more columns as needed

        ;

        try {
            String query = "SELECT DamageID, ItemID, Description, ReportedDate, ConditionID FROM Damage";
            PreparedStatement statement = con.prepareStatement(query);
            ResultSet resultSet = statement.executeQuery();

            while (resultSet.next()) {
                int damage_id = resultSet.getInt("DamageID");
                int item_id = resultSet.getInt("ItemID");
                String Description = resultSet.getString("Description");
                int condition_id = resultSet.getInt("ConditionID");
                String date = resultSet.getString("ReportedDate");

                myTable.addRow(new Object[]{damage_id, item_id, Description, date, condition_id});
            }

            System.out.println("Damaged refreshed !");
        } catch (SQLException ex) {
            System.out.println("Error populating table: " + ex.getMessage());
        }
    }

    public void addDamagedItem(int itemID, int quantity, String description) throws SQLException {
        String insertDamageQuery = "INSERT INTO Damage (ItemID, Description, ReportedDate, ConditionID) VALUES (?, ?, GETDATE(), ?)";
        String updateStockQuery = "UPDATE Stock SET Quantity = Quantity - ? WHERE ItemID = ?";
        String setConditionQuery = "UPDATE Items SET ConditionID = (SELECT ConditionID FROM Conditions WHERE ConditionName = 'Fixing') WHERE ItemID = ?";

        PreparedStatement insertDamageStmt = con.prepareStatement(insertDamageQuery);
        PreparedStatement updateStockStmt = con.prepareStatement(updateStockQuery);
        PreparedStatement setConditionStmt = con.prepareStatement(setConditionQuery);

        // Insert into Damage table
        insertDamageStmt.setInt(1, itemID);
        insertDamageStmt.setString(2, description);
        insertDamageStmt.setInt(3, getConditionID("Fixing")); // Get ConditionID for "Damaged"
        insertDamageStmt.executeUpdate();

        // Update Stock table
        updateStockStmt.setInt(1, quantity);
        updateStockStmt.setInt(2, itemID);
        updateStockStmt.executeUpdate();

        // Update Condition in Items table
        setConditionStmt.setInt(1, itemID);
        setConditionStmt.executeUpdate();

        con.commit(); // Commit transaction
        updateJTable();
        JOptionPane.showMessageDialog(null, "Item marked as damaged successfully!");

    }

    private int getConditionID(String conditionName) throws SQLException {
        String query = "SELECT ConditionID FROM Conditions WHERE ConditionName = ?";
        try (PreparedStatement stmt = con.prepareStatement(query)) {
            stmt.setString(1, conditionName);
            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    return rs.getInt("ConditionID");
                } else {
                    throw new SQLException("Condition not found: " + conditionName);
                }
            }
        }
    }

    private int getItemId(String itemName) throws SQLException {
        String query = "SELECT ItemID FROM Items WHERE ItemName = ?";
        try (PreparedStatement stmt = con.prepareStatement(query)) {
            stmt.setString(1, itemName);
            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    return rs.getInt("ItemID");
                } else {
                    throw new SQLException("Condition not found: " + itemName);
                }
            }
        }
    }

    public void createReport(int reportTypeID, Integer itemID, int performedBy, String notes) throws SQLException {
        String query = "INSERT INTO Reports (ReportTypeID, ItemID, PerformedBy, Timestamp, Notes) VALUES (?, ?, ?, GETDATE(), ?)";

        PreparedStatement stmt = con.prepareStatement(query);

        stmt.setInt(1, reportTypeID);

        stmt.setInt(2, itemID);

        stmt.setInt(3, performedBy);
        stmt.setString(4, notes);

        stmt.executeUpdate();
        JOptionPane.showMessageDialog(this, "Report created successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
    }

    private void populateConditionComboBox() {
        String query = "SELECT ConditionID AS ID, ConditionName FROM Conditions";
        populateComboBoxWithIds(query, conditionSelection, conditionIds, "ConditionName");
    }

    private void populateComboBoxWithIds(String query, javax.swing.JComboBox<String> comboBox, ArrayList<Integer> idList, String columnName) {
        comboBox.removeAllItems(); // Clear the combo box
        idList.clear(); // Clear the ID list

        try (PreparedStatement statement = con.prepareStatement(query); ResultSet resultSet = statement.executeQuery()) {
            while (resultSet.next()) {
                int id = resultSet.getInt("ID"); // ID column (e.g., CategoryID, ConditionID)
                String name = resultSet.getString(columnName); // Name column (e.g., CategoryName, ConditionName)

                idList.add(id); // Store the ID in the ArrayList
                comboBox.addItem(name); // Add the name to the combo box
            }
        } catch (SQLException ex) {
            Logger.getLogger(Items.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error populating combo box!");
        }
    }

    private ArrayList<Integer> conditionIds = new ArrayList<>();

 private void deleteSelectedRow() {
    // Get the selected row index
    int selectedRow = jTable1.getSelectedRow();
    if (selectedRow != -1) {
        int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this item from damaged?", "Confirm Delete", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            // Get the IDs from the selected row
            String item_idST = jTable1.getValueAt(selectedRow, 1).toString();
            String damage_idL = jTable1.getValueAt(selectedRow, 0).toString();
            int damage_id = Integer.parseInt(damage_idL);
            int item_id = Integer.parseInt(item_idST);

            // Check for selected condition
            int selectedConditionIndex = conditionSelection.getSelectedIndex();
            if (selectedConditionIndex == -1) {
                JOptionPane.showMessageDialog(this, "Please select a new condition for the item.");
                return;
            }

            int conditionId = conditionIds.get(selectedConditionIndex);
            String notes = description.getText();

            try {
                // Check if there are parts sharing the same category as the item
                if (!hasMatchingParts(item_id)) {
                    JOptionPane.showMessageDialog(this, "No parts share the same category with this item. Cannot terminate maintenance request.");
                    return;
                }

                // Proceed with termination
                terminateMaintenanceRequest(item_id, userID, conditionId, 0, notes, damage_id);
                createReport(3, item_id, userID, notes);
                updateJTable();

            } catch (SQLException ex) {
                Logger.getLogger(DamagedItems.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    } else {
        JOptionPane.showMessageDialog(null, "Please select a row to delete.");
    }
}
 
 
 private boolean hasMatchingParts(int itemId) throws SQLException {
    String query = """
        SELECT COUNT(*) AS Count
        FROM Parts p
        JOIN Items i ON p.CategoryID = i.CategoryID
        WHERE i.ItemID = ? AND p.Quantity > 0
    """;

    try (PreparedStatement stmt = con.prepareStatement(query)) {
        stmt.setInt(1, itemId);
        try (ResultSet rs = stmt.executeQuery()) {
            if (rs.next()) {
                return rs.getInt("Count") > 0;
            }
        }
    }

    return false; // Return false if no matching parts are found
}
 


    public void terminateMaintenanceRequest(int item_id, int userID, int newCondition, float cost, String notes, int damage_id) throws SQLException {
        String updateDamageQuery = "UPDATE Items SET ConditionID = ? WHERE ItemID = ?";
        String insertHistoryQuery = "INSERT INTO DamageHistory (item_id, RepairedBy, RepairDate, Cost, Notes) VALUES (?, ?, GETDATE(), ?, ?)";
        String deleteDamageQuery = "DELETE FROM Damage WHERE DamageID = ?";

        PreparedStatement updateDamageStmt = con.prepareStatement(updateDamageQuery);
        PreparedStatement insertHistoryStmt = con.prepareStatement(insertHistoryQuery);
        PreparedStatement deleteDamageStmt = con.prepareStatement(deleteDamageQuery);
        // Update Condition in Damage table
        updateDamageStmt.setInt(1, newCondition);
        updateDamageStmt.setInt(2, item_id);
        updateDamageStmt.executeUpdate();

        // Insert into DamageHistory table
        insertHistoryStmt.setInt(1, item_id);
        insertHistoryStmt.setInt(2, userID);
        insertHistoryStmt.setFloat(3, cost);
        insertHistoryStmt.setString(4, notes);
        insertHistoryStmt.executeUpdate();

        deleteDamageStmt.setInt(1, damage_id);
        deleteDamageStmt.executeUpdate();

        con.commit(); // Commit transaction
        JOptionPane.showMessageDialog(null, "Maintenance request terminated successfully!");

    }


    private void maintenceRequest_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maintenceRequest_btnActionPerformed

        PopulateWithDatabase();

        int conyf = JOptionPane.showConfirmDialog(this, "Are  you sure you want to request maintence? ", "Damaged Manager", JOptionPane.YES_NO_OPTION);

        String productWanted = ProductWanted.getSelectedItem().toString();
        
        
        
     int quantity=0;

        int item_id = 0;
        try {
            item_id = getItemId(productWanted);
                quantity = Integer.parseInt(quantityfld.getText());
        } catch (SQLException ex) {
            Logger.getLogger(DamagedItems.class.getName()).log(Level.SEVERE, null, ex);
        }

        String descriptionL = description.getText();

        if (conyf == JOptionPane.YES_NO_OPTION) {

            try {
                addDamagedItem(item_id, quantity, descriptionL);

                createReport(2, item_id, userID, descriptionL);
            } catch (SQLException ex) {
                Logger.getLogger(DamagedItems.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

        // TODO add your handling code here:
    }//GEN-LAST:event_maintenceRequest_btnActionPerformed

    private void descriptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_descriptionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_descriptionActionPerformed


    private void terminateDamageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_terminateDamageActionPerformed

        deleteSelectedRow();

        
        
        // TODO add your handling code here:
    }//GEN-LAST:event_terminateDamageActionPerformed

    private void ProductWantedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProductWantedActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ProductWantedActionPerformed

    private void description1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_description1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_description1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DamagedItems.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DamagedItems.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DamagedItems.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DamagedItems.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DamagedItems().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Date;
    private javax.swing.JLabel Date1;
    private javax.swing.JLabel OnlyNumbersError;
    private javax.swing.JComboBox<String> ProductWanted;
    private javax.swing.JComboBox<String> conditionSelection;
    private javax.swing.JTextField description;
    private javax.swing.JTextField description1;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton maintenceRequest_btn;
    private javax.swing.JTextField quantityfld;
    private javax.swing.JButton terminateDamage;
    // End of variables declaration//GEN-END:variables
}
