/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.secondsemesterproject;

import java.awt.Color;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import java.util.ArrayList;

/**
 *
 * @author User
 */
public class ReportTypeManager extends javax.swing.JFrame {

    /**
     * Creates new form CategoryManager
     */
    Connection con;

    public ReportTypeManager() {
        initComponents();
        this.setLocationRelativeTo(null);
        ctest cMngr = new ctest();

        try {
            con = cMngr.getConnection();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Store.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Store.class.getName()).log(Level.SEVERE, null, ex);
        }

        PopulateWithDatabase();
        OnlyNumbersError.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel24 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        selectedReportType = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        OnlyNumbersError = new javax.swing.JLabel();
        deleteReportType = new javax.swing.JButton();
        addReportType = new javax.swing.JButton();
        EditReportType = new javax.swing.JButton();
        reportTypeName = new javax.swing.JTextField();

        jLabel24.setText("jLabel20");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jLabel4.setBackground(new java.awt.Color(0, 0, 0));
        jLabel4.setFont(new java.awt.Font("Leelawadee UI Semilight", 0, 18)); // NOI18N
        jLabel4.setText("Enter a report type");

        jPanel3.setBackground(new java.awt.Color(0, 102, 102));

        jLabel6.setFont(new java.awt.Font("Leelawadee UI Semilight", 0, 45)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Report Type Manager");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(80, 80, 80)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 476, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabel6)
                .addContainerGap(35, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 24, Short.MAX_VALUE))
        );

        OnlyNumbersError.setForeground(new java.awt.Color(153, 0, 0));

        deleteReportType.setText("Delete");
        deleteReportType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteReportTypeActionPerformed(evt);
            }
        });

        addReportType.setText("Add ");
        addReportType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addReportTypeActionPerformed(evt);
            }
        });

        EditReportType.setText("Edit");
        EditReportType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditReportTypeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(211, 211, 211)
                .addComponent(deleteReportType, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                .addComponent(selectedReportType, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45)
                .addComponent(EditReportType, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(207, 207, 207)
                        .addComponent(OnlyNumbersError))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(57, 57, 57)
                                .addComponent(reportTypeName, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(addReportType, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(reportTypeName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addReportType)
                    .addComponent(deleteReportType)
                    .addComponent(EditReportType)
                    .addComponent(selectedReportType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(OnlyNumbersError)
                .addContainerGap(40, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //delete category
    private void deleteReportTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteReportTypeActionPerformed
        int selectedIndex = selectedReportType.getSelectedIndex(); // Get selected index

        int reportTypeID = reportTypeIDS.get(selectedIndex); // Get ItemID corresponding to the selected index
        boolean isUsed = false;
        StringBuilder usageMessage = new StringBuilder("There are reports assigned to this report type\n");

        // If the item is used, show the message and return
        if (isReportTypeInTable(reportTypeID, "Reports")) {
            JOptionPane.showMessageDialog(this, usageMessage.toString());
            return;
        }

        // If the item is not used, delete it from the Items table
        String deleteQuery = "DELETE FROM ReportTypes WHERE ReportTypeID = ?";
        try (PreparedStatement deleteStmt = con.prepareStatement(deleteQuery)) {
            deleteStmt.setInt(1, reportTypeID);
            int rowsAffected = deleteStmt.executeUpdate();
            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(this, " report type deleted successfully!");
                PopulateWithDatabase(); // Refresh the combo box
            } else {
                JOptionPane.showMessageDialog(this, "report type id not found in the reports table!");
            }
        } catch (SQLException ex) {
            Logger.getLogger(ReportTypeManager.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error deleting report type!");
        }
    }//GEN-LAST:event_deleteReportTypeActionPerformed

    //add category
    private void addReportTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addReportTypeActionPerformed
        // Get the category name from the text field
        String reportTypeName = this.reportTypeName.getText().trim(); // Replace with the actual name of your text field

        // Validate input
        if (reportTypeName.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Report Type name cannot be empty!");
            return;
        }

        
        
        // Check if the category already exists
        String checkQuery = "SELECT COUNT(*) AS Count FROM ReportTypes WHERE ReportTypeName = ?";
        try (PreparedStatement checkStmt = con.prepareStatement(checkQuery)) {
            checkStmt.setString(1, reportTypeName);
            try (ResultSet resultSet = checkStmt.executeQuery()) {
                if (resultSet.next() && resultSet.getInt("Count") > 0) {
                    JOptionPane.showMessageDialog(this, "This report type already exists!");
                    return;
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(Store.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error checking existing roles!");
            return;
        }

        // Insert the new category into the database
        String insertQuery = "INSERT INTO ReportTypes (ReportTypeName) VALUES (?)";
        try (PreparedStatement insertStmt = con.prepareStatement(insertQuery)) {
            insertStmt.setString(1, reportTypeName);
            int rowsAffected = insertStmt.executeUpdate();

            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(this, "Report type added successfully to the system!");
                this.reportTypeName.setText(""); // Clear the text field
                PopulateWithDatabase(); // Refresh category dropdown (if applicable)
            } else {
                JOptionPane.showMessageDialog(this, "Failed to add report type!");
            }
        } catch (SQLException ex) {
            Logger.getLogger(Store.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error adding role to the database!");
        }
    }//GEN-LAST:event_addReportTypeActionPerformed

    private boolean isEditMode = false; // Tracks if we are in edit mode

    //edit category
    private void EditReportTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditReportTypeActionPerformed
      
        
        
        
        int selectedIndex = selectedReportType.getSelectedIndex(); // Get selected index
        if (selectedIndex == -1) {
            JOptionPane.showMessageDialog(this, "Please select a reportType to edit!");
            return;
        }

        int reportTypeId = reportTypeIDS.get(selectedIndex); // Get the selected CategoryID

        if (!isEditMode) {
            // Enter edit mode
            String reportTypeName = selectedReportType.getSelectedItem().toString(); // Get the category name
            this.reportTypeName.setText(reportTypeName); // Display the name in the text field
            isEditMode = true;

            // Disable add, delete, and combobox
            addReportType.setEnabled(false);
            deleteReportType.setEnabled(false);
            selectedReportType.setEnabled(false);

            EditReportType.setText("Save Changes"); // Update button text
        } else {
            // Save changes
            String updatedReportTypeName = this.reportTypeName.getText().trim();

            // Validate input
            if (updatedReportTypeName.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Report type name cannot be empty!");
                return;
            }

            // Update the category in the database
            String updateQuery = "UPDATE ReportTypes SET ReportTypeName = ? WHERE ReportTypeID = ?";
            try (PreparedStatement stmt = con.prepareStatement(updateQuery)) {
                stmt.setString(1, updatedReportTypeName);
                stmt.setInt(2, reportTypeId);

                int rowsAffected = stmt.executeUpdate();
                if (rowsAffected > 0) {
                    JOptionPane.showMessageDialog(this, "report type updated successfully!");
                    PopulateWithDatabase(); // Refresh the combo box
                    this.reportTypeName.setText(""); // Clear the text field
                } else {
                    JOptionPane.showMessageDialog(this, "Failed to update report type!");
                }
            } catch (SQLException ex) {
                Logger.getLogger(Store.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "Error updating report type!!");
            }

            // Exit edit mode
            isEditMode = false;

            // Re-enable add, delete, and combobox
            addReportType.setEnabled(true);
            deleteReportType.setEnabled(true);
            selectedReportType.setEnabled(true);

            EditReportType.setText("Edit"); // Reset button text
        }

    }//GEN-LAST:event_EditReportTypeActionPerformed

    private ArrayList<Integer> reportTypeIDS = new ArrayList<>(); // To store Item IDs

    //update the category combobox
    public void PopulateWithDatabase() {
        selectedReportType.removeAllItems(); // Clear existing items
        reportTypeIDS.clear(); // Clear existing IDs
        String sql = "SELECT ReportTypeID, ReportTypeName FROM ReportTypes"; // Select both ItemID and ItemName
        try (PreparedStatement p = con.prepareStatement(sql)) {
            ResultSet resultSet = p.executeQuery();
            while (resultSet.next()) {
                int itemId = resultSet.getInt("ReportTypeID");
                String itemName = resultSet.getString("ReportTypeName");

                // Store the ID and add the name to the combo box
                reportTypeIDS.add(itemId);
                selectedReportType.addItem(itemName);
            }
        } catch (SQLException ex) {
            Logger.getLogger(Store.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error populating combo box!");
        }
    }

    //check on category if it holds an item
    private boolean isReportTypeInTable(int reportTypeId, String tableName) {
        String query = "SELECT COUNT(*) AS Count FROM " + tableName + " WHERE ReportTypeID = ?";
        try (PreparedStatement stmt = con.prepareStatement(query)) {
            stmt.setInt(1, reportTypeId);
            try (ResultSet resultSet = stmt.executeQuery()) {
                if (resultSet.next()) {
                    return resultSet.getInt("Count") > 0; // Return true if the count is greater than 0
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(ReportTypeManager.class.getName()).log(Level.SEVERE, "Error checking table: " + tableName, ex);
        }
        return false; // Return false if an exception occurs or no rows are found
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ReportTypeManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ReportTypeManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ReportTypeManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ReportTypeManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ReportTypeManager().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton EditReportType;
    private javax.swing.JLabel OnlyNumbersError;
    private javax.swing.JButton addReportType;
    private javax.swing.JButton deleteReportType;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JTextField reportTypeName;
    private javax.swing.JComboBox<String> selectedReportType;
    // End of variables declaration//GEN-END:variables
}
