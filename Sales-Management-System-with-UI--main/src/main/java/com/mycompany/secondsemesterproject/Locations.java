/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.secondsemesterproject;

import java.awt.Color;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;

/**
 *
 * @author User
 */
public class Locations extends javax.swing.JFrame {

    /**
     * Creates new form ItemCard
     */
    Connection con;
    
    
    public int userid;
   public int userrole;
    
       public Locations() {
       
       
          initComponents();

        ctest cMngr = new ctest();

        try {
            con = cMngr.getConnection();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Store.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Store.class.getName()).log(Level.SEVERE, null, ex);
        }

        this.setLocationRelativeTo(null);

        
        ConfirmButton.setEnabled(true);

     
        
        //generate the combobox
        PopulateLocationsWithDatabase();
        PopulateCountryWithDatabase();
       }

    public Locations(int userid, int userrole) {
        
        
        initComponents();

        ctest cMngr = new ctest();

        try {
            con = cMngr.getConnection();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Store.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Store.class.getName()).log(Level.SEVERE, null, ex);
        }

        this.setLocationRelativeTo(null);

        
        ConfirmButton.setEnabled(true);

        this.userid=userid;
        this.userrole = userrole;
        
        //generate the combobox
        PopulateLocationsWithDatabase();
        PopulateCountryWithDatabase();
    }

    public class Stock extends Locations {

        private int quantity;

        public int getQuantity() {
            return quantity;
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel10 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        LocationName = new javax.swing.JTextField();
        ConfirmButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        goHome = new javax.swing.JButton();
        addCountry = new javax.swing.JButton();
        CountryId = new javax.swing.JComboBox<>();
        DeleteButton = new javax.swing.JButton();
        EditButton = new javax.swing.JButton();
        selectLocation = new javax.swing.JComboBox<>();
        jLabel12 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        AddressDetials = new javax.swing.JTextArea();

        jLabel10.setText("jLabel1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(0, 102, 102));

        jLabel11.setBackground(new java.awt.Color(255, 255, 255));
        jLabel11.setFont(new java.awt.Font("Franklin Gothic Medium", 1, 24)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("Locations Manager");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(112, 112, 112)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(549, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel11)
                .addGap(51, 51, 51))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addComponent(jLabel6)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        LocationName.setForeground(new java.awt.Color(18, 30, 49));

        ConfirmButton.setText("Confirm");
        ConfirmButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConfirmButtonActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N

        jLabel5.setFont(new java.awt.Font("Leelawadee UI Semilight", 0, 14)); // NOI18N
        jLabel5.setText("Country");

        jLabel14.setFont(new java.awt.Font("Leelawadee UI Semilight", 0, 14)); // NOI18N
        jLabel14.setText("Location Name");

        jPanel3.setBackground(new java.awt.Color(0, 102, 102));

        goHome.setText("Go Back");
        goHome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goHomeActionPerformed(evt);
            }
        });

        addCountry.setText("Add Country");
        addCountry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCountryActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(58, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(addCountry, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(goHome, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(goHome, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(addCountry, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        DeleteButton.setText("Delete");
        DeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteButtonActionPerformed(evt);
            }
        });

        EditButton.setText("Edit");
        EditButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditButtonActionPerformed(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Leelawadee UI Semilight", 0, 14)); // NOI18N
        jLabel12.setText("Address");

        AddressDetials.setColumns(20);
        AddressDetials.setRows(5);
        jScrollPane1.setViewportView(AddressDetials);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(191, 191, 191)
                        .addComponent(jLabel4))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(ConfirmButton, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(56, 56, 56)
                        .addComponent(DeleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(54, 54, 54)
                        .addComponent(selectLocation, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(90, 90, 90)
                        .addComponent(EditButton, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(98, 98, 98)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(201, 201, 201)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(CountryId, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(LocationName, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 226, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 148, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(LocationName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel14))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(CountryId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel12)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(84, 84, 84)
                        .addComponent(jLabel4)
                        .addGap(12, 12, 12)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ConfirmButton)
                            .addComponent(DeleteButton)
                            .addComponent(selectLocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(EditButton))
                        .addGap(64, 64, 64))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //add item to the system
    private void ConfirmButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConfirmButtonActionPerformed
        String locationName = LocationName.getText();
        String Address = AddressDetials.getText();

        // Get selected index from combo boxes
        int selectedCountryIndex = CountryId.getSelectedIndex();

        // Fetch IDs from the ArrayLists
        int countryId = countryIds.get(selectedCountryIndex);

        
        if (!isLocationNameUnique(locationName, -1)) {
            JOptionPane.showMessageDialog(this, "A location with this name already exists! Please choose a different name.");
            return;
        }
        
        
        
        // Insert the item into the Items table
        String query = "INSERT INTO Locations (LocationName, Address, CountryID) VALUES (?, ?, ?)";
        try (PreparedStatement statement = con.prepareStatement(query)) {
            statement.setString(1, locationName);
            statement.setString(2, Address);
            statement.setInt(3, countryId);

            statement.executeUpdate();
            PopulateLocationsWithDatabase();
            clearFields();
            JOptionPane.showMessageDialog(this, "Location Added to the system!");

        } catch (SQLException ex) {
            Logger.getLogger(Locations.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error adding location to the database!");
        }

    }//GEN-LAST:event_ConfirmButtonActionPerformed

    //Delete item
    private void DeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteButtonActionPerformed

        int selectedIndex = selectLocation.getSelectedIndex(); // Get selected index
        if (selectedIndex == -1) {
            JOptionPane.showMessageDialog(this, "Please select an location to delete!");
            return;
        }
        int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete the location?", "Confirm Delete", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            int locationId = locationIds.get(selectedIndex); // Get ItemID corresponding to the selected index
            boolean isUsed = false;
            StringBuilder usageMessage = new StringBuilder("The location is being used in the following tables:\n");

            // Check tables using isItemInTable
            if (isItemInTable(locationId, "Stock")) {
                isUsed = true;
                usageMessage.append("- Stock\n");
            }
            if (isItemInTable(locationId, "BillDetails")) {
                isUsed = true;
                usageMessage.append("- BillDetails\n");
            }

            // If the item is used, show the message and return
            if (isUsed) {
                JOptionPane.showMessageDialog(this, usageMessage.toString());
                return;
            }

            // If the item is not used, delete it from the Items table
            String deleteQuery = "DELETE FROM Locations WHERE LocationID = ?";
            try (PreparedStatement deleteStmt = con.prepareStatement(deleteQuery)) {
                deleteStmt.setInt(1, locationId);
                int rowsAffected = deleteStmt.executeUpdate();
                if (rowsAffected > 0) {
                    JOptionPane.showMessageDialog(this, "Location deleted successfully!");
                    PopulateLocationsWithDatabase(); // Refresh the combo box
                } else {
                    JOptionPane.showMessageDialog(this, "Location ID not found in the Locations table!");
                }
            } catch (SQLException ex) {
                Logger.getLogger(CategoryManager.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "Error deleting location !");
            }

        } else {
            JOptionPane.showMessageDialog(this, "Location is not deleted!");

        }

    }//GEN-LAST:event_DeleteButtonActionPerformed

    //go back to the manager
    private void goHomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goHomeActionPerformed
        // TODO add your handling code here:
        
        dispose();
        ManagerDasboard m = new ManagerDasboard(userrole,userid);
        m.setVisible(true);
    }//GEN-LAST:event_goHomeActionPerformed

    // Flag to track edit mode
    private boolean isEditMode = false;

    //edit item
    private void EditButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditButtonActionPerformed
        int selectedIndex = selectLocation.getSelectedIndex(); // Get selected index
        if (selectedIndex == -1) {
            JOptionPane.showMessageDialog(this, "Please select a location to edit!");
            return;
        }

        int selectedLocationId = locationIds.get(selectedIndex); // Get ItemID for the selected item

        if (!isEditMode) {
            // Enter edit mode
            loadLocationDetails(selectedLocationId); // Load details for editing
            isEditMode = true;
            EditButton.setText("Confirm Edit"); // Change button text to indicate confirmation
            ConfirmButton.setEnabled(false); // Disable Confirm button
            DeleteButton.setEnabled(false); // Disable Delete button
            selectLocation.setEnabled(false); // Disable the selectItem combo box
        } else {
            // Confirm the edit
            int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to save changes?", "Confirm Edit", JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                // Update the item in the database
                String locationName = LocationName.getText();
                String Address = AddressDetials.getText();
                
                
                if (!isLocationNameUnique(locationName, -1)) {
            JOptionPane.showMessageDialog(this, "A location with this name already exists! Please choose a different name.");
            return;
        }
                
                

                int countryIdValue = countryIds.get(CountryId.getSelectedIndex()); // Get selected ConditionID

                String updateQuery = "UPDATE Locations SET LocationName = ?, Address = ?, CountryID = ? WHERE LocationID = ?";
                try (PreparedStatement statement = con.prepareStatement(updateQuery)) {
                    statement.setString(1, locationName);
                    statement.setString(2, Address);
                    statement.setInt(3, countryIdValue);
                    statement.setInt(4, selectedLocationId);

                    int rowsAffected = statement.executeUpdate();
                    if (rowsAffected > 0) {
                        JOptionPane.showMessageDialog(this, "Location updated successfully!");
                        PopulateLocationsWithDatabase(); // Refresh the combo box
                    } else {
                        JOptionPane.showMessageDialog(this, "Failed to update the location!");
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(Locations.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this, "Error updating location in the database!");
                }

            }
            // Exit edit mode
            isEditMode = false;
            EditButton.setText("Edit"); // Reset button text
            ConfirmButton.setEnabled(true); // Enable Confirm button
            DeleteButton.setEnabled(true); // Enable Delete button
            selectLocation.setEnabled(true); // Re-enable the selectItem combo box
            clearFields();
        }


    }//GEN-LAST:event_EditButtonActionPerformed

    private void addCountryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCountryActionPerformed
        // TODO add your handling code here:
        CountryManager c = new CountryManager();
        c.setVisible(true);
    }//GEN-LAST:event_addCountryActionPerformed

    //check on the form data
    public boolean checkFields() {
        boolean checkPassed = true;
        String productName1 = LocationName.getText();

        if (productName1.isEmpty()) {
            // Handle empty fields
        

            checkPassed = false;
        } else {
            try {

                if (containsNumber(productName1)) {
                   
                    checkPassed = false;
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Please enter appropriate values to the fields");
                checkPassed = false;
            }
        }

        return checkPassed;
    }

    //check the type
    private boolean containsNumber(String str) {
        for (char c : str.toCharArray()) {
            if (Character.isDigit(c)) {
                return true;
            }
        }
        return false;
    }

    //load item's data into the form
    private void loadLocationDetails(int itemId) {
        String query = "SELECT LocationName, Address, CountryID FROM Locations WHERE LocationID = ?";
        try (PreparedStatement statement = con.prepareStatement(query)) {
            statement.setInt(1, itemId);
            try (ResultSet resultSet = statement.executeQuery()) {
                if (resultSet.next()) {
                    String locationName = resultSet.getString("LocationName");
                    String address = resultSet.getString("Address");
                    int conditionIdValue = resultSet.getInt("CountryID");

                    // Populate fields
                    LocationName.setText(locationName);
                    AddressDetials.setText(address);

                    // Set combo box selections
                    CountryId.setSelectedIndex(countryIds.indexOf(conditionIdValue));

                    // Disable delete and confirm buttons
                    ConfirmButton.setEnabled(false);
                    DeleteButton.setEnabled(false);
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(Locations.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error loading item details!");
        }
    }

    //check if item is in the table
    private boolean isItemInTable(int itemId, String tableName) {
        String query = "SELECT COUNT(*) AS Count FROM " + tableName + " WHERE LocationID = ?";
        try (PreparedStatement stmt = con.prepareStatement(query)) {
            stmt.setInt(1, itemId);
            try (ResultSet resultSet = stmt.executeQuery()) {
                if (resultSet.next()) {
                    return resultSet.getInt("Count") > 0; // Return true if the count is greater than 0
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(CategoryManager.class.getName()).log(Level.SEVERE, "Error checking table: " + tableName, ex);
        }
        return false; // Return false if an exception occurs or no rows are found
    }

    private ArrayList<Integer> countryIds = new ArrayList<>();
    private ArrayList<Integer> locationIds = new ArrayList<>();

    //show countries
    public void PopulateCountryWithDatabase() {
        CountryId.removeAllItems(); // Clear the combo box
        countryIds.clear(); // Clear the ID list

        String query = "SELECT CountryID AS ID, CountryName FROM Countries";
        try (PreparedStatement statement = con.prepareStatement(query); ResultSet resultSet = statement.executeQuery()) {
            while (resultSet.next()) {
                int id = resultSet.getInt("ID"); // ID column (e.g., CategoryID, ConditionID)
                String name = resultSet.getString("CountryName"); // Name column (e.g., CategoryName, ConditionName)

                countryIds.add(id); // Store the ID in the ArrayList
                CountryId.addItem(name); // Add the name to the combo box
            }
        } catch (SQLException ex) {
            Logger.getLogger(Items.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error populating combo box!");
        }
    }

    
    
    
       private boolean isLocationNameUnique(String locationName, int excludedItemId) {
        String query = "SELECT COUNT(*) AS Count FROM Locations WHERE LocationName = ? AND LocationID != ?";
        try (PreparedStatement stmt = con.prepareStatement(query)) {
            stmt.setString(1, locationName);
            stmt.setInt(2, excludedItemId);
            try (ResultSet resultSet = stmt.executeQuery()) {
                if (resultSet.next()) {
                    return resultSet.getInt("Count") == 0; // True if no duplicates found
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(Items.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error checking item uniqueness!");
        }
        return false; // Assume not unique if an error occurs

    }
    
    
    
    
    //show items
    private void PopulateLocationsWithDatabase() {
        selectLocation.removeAllItems(); // Clear the combo box
        locationIds.clear(); // Clear the ID list

        String query = "SELECT LocationID AS ID, LocationName FROM Locations";
        try (PreparedStatement statement = con.prepareStatement(query); ResultSet resultSet = statement.executeQuery()) {
            while (resultSet.next()) {
                int id = resultSet.getInt("ID"); // ID column (e.g., CategoryID, ConditionID)
                String name = resultSet.getString("LocationName"); // Name column (e.g., CategoryName, ConditionName)

                locationIds.add(id); // Store the ID in the ArrayList
                selectLocation.addItem(name); // Add the name to the combo box
            }
        } catch (SQLException ex) {
            Logger.getLogger(Items.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error populating combo box!");
        }
    }

    //clear the text fields:
    private void clearFields() {
        LocationName.setText(""); // Clear product name
        AddressDetials.setText(""); // Clear address
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */

 /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                Locations s = new Locations();
                s.setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea AddressDetials;
    private javax.swing.JButton ConfirmButton;
    private javax.swing.JComboBox<String> CountryId;
    private javax.swing.JButton DeleteButton;
    private javax.swing.JButton EditButton;
    private javax.swing.JTextField LocationName;
    private javax.swing.JButton addCountry;
    private javax.swing.JButton goHome;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> selectLocation;
    // End of variables declaration//GEN-END:variables
}
