/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.secondsemesterproject;

import java.awt.Color;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;

/**
 *
 * @author User
 */
public class Supplier extends javax.swing.JFrame {

    /**
     * Creates new form ItemCard
     */
    Connection con;

    
    public int userid;
    public int userrole;
    
    
    public Supplier() {
          initComponents();
     ctest cMngr = new ctest();

        try {
            con = cMngr.getConnection();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Store.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Store.class.getName()).log(Level.SEVERE, null, ex);
        }
    
        PopulateSuppliersWithDatabase();
        PopulateCountryWithDatabase();
    
    }
    
    
    
    
    
    public Supplier(int userid, int userrole) {
        initComponents();

        ctest cMngr = new ctest();

        try {
            con = cMngr.getConnection();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Store.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Store.class.getName()).log(Level.SEVERE, null, ex);
        }

        this.setLocationRelativeTo(null);
this.userid = userid;
        this.userrole = userrole;
        ConfirmButton.setEnabled(true);

        //generate the combobox
        PopulateSuppliersWithDatabase();
        PopulateCountryWithDatabase();
        
        
        
        
        
    }

    public class Stock extends Supplier {

        private int quantity;

        public int getQuantity() {
            return quantity;
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel10 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        SupplierName = new javax.swing.JTextField();
        ConfirmButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        goHome = new javax.swing.JButton();
        addParts = new javax.swing.JButton();
        countryId = new javax.swing.JComboBox<>();
        DeleteButton = new javax.swing.JButton();
        EditButton = new javax.swing.JButton();
        selectSupplier = new javax.swing.JComboBox<>();
        jLabel12 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        AddressDetails = new javax.swing.JTextArea();
        jLabel15 = new javax.swing.JLabel();
        SupplierContactInfo = new javax.swing.JTextField();

        jLabel10.setText("jLabel1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(0, 102, 102));

        jLabel11.setBackground(new java.awt.Color(255, 255, 255));
        jLabel11.setFont(new java.awt.Font("Franklin Gothic Medium", 1, 24)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("Supplier Manager");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(112, 112, 112)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(572, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel11)
                .addGap(51, 51, 51))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addComponent(jLabel6)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        SupplierName.setForeground(new java.awt.Color(18, 30, 49));

        ConfirmButton.setText("Confirm");
        ConfirmButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConfirmButtonActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N

        jLabel5.setFont(new java.awt.Font("Leelawadee UI Semilight", 0, 14)); // NOI18N
        jLabel5.setText("Country");

        jLabel14.setFont(new java.awt.Font("Leelawadee UI Semilight", 0, 14)); // NOI18N
        jLabel14.setText("Supplier Name");

        jPanel3.setBackground(new java.awt.Color(0, 102, 102));

        goHome.setText("Go Back");
        goHome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goHomeActionPerformed(evt);
            }
        });

        addParts.setText("Add Parts");
        addParts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPartsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(58, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(addParts, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(goHome, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(goHome, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(addParts, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 437, Short.MAX_VALUE))
        );

        DeleteButton.setText("Delete");
        DeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteButtonActionPerformed(evt);
            }
        });

        EditButton.setText("Edit");
        EditButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditButtonActionPerformed(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Leelawadee UI Semilight", 0, 14)); // NOI18N
        jLabel12.setText("Address");

        AddressDetails.setColumns(20);
        AddressDetails.setRows(5);
        jScrollPane1.setViewportView(AddressDetails);

        jLabel15.setFont(new java.awt.Font("Leelawadee UI Semilight", 0, 14)); // NOI18N
        jLabel15.setText("Contact Info");

        SupplierContactInfo.setForeground(new java.awt.Color(18, 30, 49));
        SupplierContactInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SupplierContactInfoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(191, 191, 191)
                        .addComponent(jLabel4))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(ConfirmButton, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(56, 56, 56)
                        .addComponent(DeleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(54, 54, 54)
                        .addComponent(selectSupplier, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(90, 90, 90)
                        .addComponent(EditButton, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(98, 98, 98)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(192, 192, 192)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(countryId, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(SupplierContactInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(SupplierName, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 208, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(SupplierName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel14, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel15)
                            .addComponent(SupplierContactInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(14, 14, 14)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(countryId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel12)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(23, 23, 23)
                        .addComponent(jLabel4)
                        .addGap(12, 12, 12)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ConfirmButton)
                            .addComponent(DeleteButton)
                            .addComponent(selectSupplier, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(EditButton))
                        .addGap(64, 64, 64))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    
     public void createReport(int reportTypeID, Integer itemID, int performedBy, String notes) throws SQLException {
        String query = "INSERT INTO Reports (ReportTypeID, ItemID, PerformedBy, Timestamp, Notes) VALUES (?, ?, ?, GETDATE(), ?)";

        PreparedStatement stmt = con.prepareStatement(query);

        stmt.setInt(1, reportTypeID);

               stmt.setNull(2, java.sql.Types.INTEGER);

        stmt.setInt(3, performedBy);
        stmt.setString(4, notes);

        stmt.executeUpdate();
        JOptionPane.showMessageDialog(this, "Report created successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
    }
     
     
     

    private int getItemId(String itemName) throws SQLException {
        String query = "SELECT SupplierID FROM Suppliers WHERE SupplierName = ?";
        try (PreparedStatement stmt = con.prepareStatement(query)) {
            stmt.setString(1, itemName);
            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    return rs.getInt("SupplierID");
                } else {
                    throw new SQLException("supplier not found: " + itemName);
                }
            }
        }
    }
    
    
    
    //add item to the system
    private void ConfirmButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConfirmButtonActionPerformed
        // Get inputs
        String supplierName = SupplierName.getText().trim();
        String supplierContact = SupplierContactInfo.getText().trim();
        String address = AddressDetails.getText().trim();
        int selectedCountryIndex = countryId.getSelectedIndex();

        // Validate inputs
        if (supplierName.isEmpty() || address.isEmpty() || selectedCountryIndex == -1) {
            JOptionPane.showMessageDialog(this, "Please fill out all required fields!");
            return;
        }

        // Fetch IDs from the ArrayList
        int countryId = countryIds.get(selectedCountryIndex);
        
        
        
                if (!isSupplierNameUnique(supplierName, -1)) {
            JOptionPane.showMessageDialog(this, "A supplier with this name already exists! Please choose a different name.");
            return;
        }

        try {
            // Create a new location and get the LocationID
            int locationId = createLocation(supplierName + "Supplier Location", address, countryId);

            // Add the supplier to the system
            addSupplier(supplierName, supplierContact, locationId);
            PopulateSuppliersWithDatabase();
            // Feedback to the user
            JOptionPane.showMessageDialog(this, "Supplier added successfully!");
            int itemid = getItemId(supplierName);
            createReport(12,itemid,userid,"supplier added.");

            // Clear the fields
            clearFields();
        } catch (SQLException ex) {
            Logger.getLogger(Store.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error adding supplier!");
        }
        SupplierName.setText("");
        SupplierContactInfo.setText("");
        AddressDetails.setText("");

    }//GEN-LAST:event_ConfirmButtonActionPerformed

    //creat location for hte supplier
    private int createLocation(String locationName, String address, int countryId) throws SQLException {
        String locationQuery = "INSERT INTO Locations (LocationName, Address, CountryID) OUTPUT INSERTED.LocationID VALUES (?, ?, ?)";
        try (PreparedStatement stmt = con.prepareStatement(locationQuery)) {
            stmt.setString(1, locationName);
            stmt.setString(2, address);
            stmt.setInt(3, countryId);
            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    return rs.getInt("LocationID");
                } else {
                    throw new SQLException("Failed to create location!");
                }
            }
        }
    }

    //add the supplier
    private void addSupplier(String supplierName, String supplierContact, int locationId) throws SQLException {
        String supplierQuery = "INSERT INTO Suppliers (SupplierName, ContactInfo, LocationID) VALUES (?, ?, ?)";
        try (PreparedStatement stmt = con.prepareStatement(supplierQuery)) {
            stmt.setString(1, supplierName);
            stmt.setString(2, supplierContact.isEmpty() ? null : supplierContact); // Handle optional contact info
            stmt.setInt(3, locationId);

            int rowsAffected = stmt.executeUpdate();
            if (rowsAffected == 0) {
                throw new SQLException("Failed to add supplier!");
            }
        }
    }

    //Delete item
    private void DeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteButtonActionPerformed

        int selectedIndex = selectSupplier.getSelectedIndex(); // Get selected index
        if (selectedIndex == -1) {
            JOptionPane.showMessageDialog(this, "Please select an supplier to delete!");
            return;
        }
        int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete the supplier?", "Confirm Delete", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            int supplierId = supplierIds.get(selectedIndex); // Get ItemID corresponding to the selected index
            boolean isUsed = false;
            StringBuilder usageMessage = new StringBuilder("The supplier is being used in the table: \n");

            // Check tables using isItemInTable
            if (isSupplierInTable(supplierId, "Parts")) {
                isUsed = true;
                usageMessage.append("- Parts\n");
            }

            // If the item is used, show the message and return
            if (isUsed) {
                JOptionPane.showMessageDialog(this, usageMessage.toString());
                return;
            }

            // If the item is not used, delete it from the Items table
            String deleteQuery = "DELETE FROM Suppliers WHERE SupplierID = ?";
            try (PreparedStatement deleteStmt = con.prepareStatement(deleteQuery)) {
                deleteStmt.setInt(1, supplierId);
                int rowsAffected = deleteStmt.executeUpdate();
                if (rowsAffected > 0) {
                    JOptionPane.showMessageDialog(this, "supplier deleted successfully!");
                    
                   
            createReport(11,supplierId,userid,"supplier deleted.");
            

                    PopulateSuppliersWithDatabase(); // Refresh the combo box
                } else {
                    JOptionPane.showMessageDialog(this, "Supplier ID not found in the suppliers table!");
                }
            } catch (SQLException ex) {
                Logger.getLogger(CategoryManager.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "Error deleting supplier !");
            }

        } else {
            JOptionPane.showMessageDialog(this, "Supplier is not deleted!");

        }

    }//GEN-LAST:event_DeleteButtonActionPerformed

    //go back to the manager
    private void goHomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goHomeActionPerformed
        // TODO add your handling code here:
        
        dispose();
        ManagerDasboard m = new ManagerDasboard(userrole,userid);
        m.setVisible(true);
        
    }//GEN-LAST:event_goHomeActionPerformed

    //Flag to track edit mode
    private boolean isEditMode = false;

    //edit item
    private void EditButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditButtonActionPerformed
        int selectedIndex = selectSupplier.getSelectedIndex(); // Get selected index
        if (selectedIndex == -1) {
            JOptionPane.showMessageDialog(this, "Please select a supplier to edit!");
            return;
        }

        int selectedSupplierId = supplierIds.get(selectedIndex); // Get SupplierID for the selected item

        
        
        
        if (!isEditMode) {
            // Enter edit mode
            loadSupplierDetails(selectedSupplierId); // Load details for editing
            isEditMode = true;
            EditButton.setText("Confirm Edit"); // Change button text to indicate confirmation
            ConfirmButton.setEnabled(false); // Disable Confirm button
            DeleteButton.setEnabled(false); // Disable Delete button
            selectSupplier.setEnabled(false); // Disable the selectSupplier combo box
        } else {
            // Confirm the edit
            int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to save changes?", "Confirm Edit", JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                // Update the supplier and location in the database
                String supplierName = SupplierName.getText().trim();
                
                        if (!isSupplierNameUnique(supplierName, -1)) {
            JOptionPane.showMessageDialog(this, "A supplier with this name already exists! Please choose a different name.");
            return;
        }
                
                
                String supplierContact = SupplierContactInfo.getText().trim();
                String address = AddressDetails.getText().trim();
                int countryIdValue = countryIds.get(countryId.getSelectedIndex()); // Get selected CountryID

                if (supplierName.isEmpty() || address.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Supplier name and address cannot be empty!");
                    return;
                }

                try {
                    // Update the location first
                    int locationId = getLocationIdForSupplier(selectedSupplierId); // Fetch the LocationID for the supplier
                    updateLocation(locationId, "Supplier Location", address, countryIdValue);

                    // Update the supplier details
                    String updateSupplierQuery = "UPDATE Suppliers SET SupplierName = ?, ContactInfo = ? WHERE SupplierID = ?";
                    try (PreparedStatement stmt = con.prepareStatement(updateSupplierQuery)) {
                        stmt.setString(1, supplierName);
                        stmt.setString(2, supplierContact.isEmpty() ? null : supplierContact);
                        stmt.setInt(3, selectedSupplierId);

                        int rowsAffected = stmt.executeUpdate();
                        if (rowsAffected > 0) {
                            JOptionPane.showMessageDialog(this, "Supplier updated successfully!");
                            
                            int supid = getItemId(supplierName);
                            
                             createReport(24,supid,userid,"supplier edited.");
                            PopulateSuppliersWithDatabase(); // Refresh the combo box
                        } else {
                            JOptionPane.showMessageDialog(this, "Failed to update the supplier!");
                        }
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(Supplier.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this, "Error updating supplier or location in the database!");
                }
            }

            // Exit edit mode
            isEditMode = false;
            EditButton.setText("Edit"); // Reset button text
            ConfirmButton.setEnabled(true); // Enable Confirm button
            DeleteButton.setEnabled(true); // Enable Delete button
            selectSupplier.setEnabled(true); // Re-enable the selectSupplier combo box
            clearFields();
        }

    }//GEN-LAST:event_EditButtonActionPerformed

    //load the supplier data into the form
    private void loadSupplierDetails(int supplierId) {
        String query = "{CALL GetSupplierDetails(?)}"; // Call the stored procedure

        try (PreparedStatement stmt = con.prepareStatement(query)) {
            stmt.setInt(1, supplierId); // Set the SupplierID parameter
            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    // Populate the UI fields with the retrieved data
                    SupplierName.setText(rs.getString("SupplierName"));
                    SupplierContactInfo.setText(rs.getString("ContactInfo"));
                    AddressDetails.setText(rs.getString("Address"));
                    int countryIdIndex = rs.getInt("CountryID"); // Get the CountryID from the ResultSet
                    countryId.setSelectedIndex(countryIds.indexOf(countryIdIndex)); // Set selected country in the combo box
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(Supplier.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error loading supplier details!");
        }
    }

    //get the location (in order to update it)
    private int getLocationIdForSupplier(int supplierId) throws SQLException {
        String query = "SELECT LocationID FROM Suppliers WHERE SupplierID = ?";
        try (PreparedStatement stmt = con.prepareStatement(query)) {
            stmt.setInt(1, supplierId);
            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    return rs.getInt("LocationID");
                } else {
                    throw new SQLException("LocationID not found for supplier!");
                }
            }
        }
    }

    //update the location
    private void updateLocation(int locationId, String locationName, String address, int countryId) throws SQLException {
        String query = "UPDATE Locations SET LocationName = ?, Address = ?, CountryID = ? WHERE LocationID = ?";
        try (PreparedStatement stmt = con.prepareStatement(query)) {
            stmt.setString(1, locationName);
            stmt.setString(2, address);
            stmt.setInt(3, countryId);
            stmt.setInt(4, locationId);

            int rowsAffected = stmt.executeUpdate();
            if (rowsAffected == 0) {
                throw new SQLException("Failed to update location!");
            }
        }
    }

    //add part to the system
    private void addPartsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPartsActionPerformed
        // TODO add your handling code here:
        PartsManager c = new PartsManager();
        c.setVisible(true);
    }//GEN-LAST:event_addPartsActionPerformed

    private void SupplierContactInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SupplierContactInfoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SupplierContactInfoActionPerformed

    //check the type
    private boolean containsNumber(String str) {
        for (char c : str.toCharArray()) {
            if (Character.isDigit(c)) {
                return true;
            }
        }
        return false;
    }

    //load item's data into the form
    private void loadLocationDetails(int itemId) {
        String query = "SELECT LocationName, Address, CountryID FROM Locations WHERE LocationID = ?";
        try (PreparedStatement statement = con.prepareStatement(query)) {
            statement.setInt(1, itemId);
            try (ResultSet resultSet = statement.executeQuery()) {
                if (resultSet.next()) {
                    String locationName = resultSet.getString("LocationName");
                    String address = resultSet.getString("Address");
                    int conditionIdValue = resultSet.getInt("CountryID");

                    // Populate fields
                    SupplierName.setText(locationName);
                    AddressDetails.setText(address);

                    // Set combo box selections
                    countryId.setSelectedIndex(countryIds.indexOf(conditionIdValue));

                    // Disable delete and confirm buttons
                    ConfirmButton.setEnabled(false);
                    DeleteButton.setEnabled(false);
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(Supplier.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error loading item details!");
        }
    }

    //check if item is in the table
    private boolean isSupplierInTable(int supplierId, String tableName) {
        String query = "SELECT COUNT(*) AS Count FROM " + tableName + " WHERE SupplierID = ?";
        try (PreparedStatement stmt = con.prepareStatement(query)) {
            stmt.setInt(1, supplierId);
            try (ResultSet resultSet = stmt.executeQuery()) {
                if (resultSet.next()) {
                    return resultSet.getInt("Count") > 0; // Return true if the count is greater than 0
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(CategoryManager.class.getName()).log(Level.SEVERE, "Error checking table: " + tableName, ex);
        }
        return false; // Return false if an exception occurs or no rows are found
    }
    
    
        //check item uniqueness
    private boolean isSupplierNameUnique(String supplierName, int excludedItemId) {
        String query = "SELECT COUNT(*) AS Count FROM Suppliers WHERE SupplierName = ? AND SupplierID != ?";
        try (PreparedStatement stmt = con.prepareStatement(query)) {
            stmt.setString(1, supplierName);
            stmt.setInt(2, excludedItemId);
            try (ResultSet resultSet = stmt.executeQuery()) {
                if (resultSet.next()) {
                    return resultSet.getInt("Count") == 0; // True if no duplicates found
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(Items.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error checking item uniqueness!");
        }
        return false; // Assume not unique if an error occurs

        
    }

    private ArrayList<Integer> countryIds = new ArrayList<>();
    private ArrayList<Integer> supplierIds = new ArrayList<>();

    //show countries
    public void PopulateCountryWithDatabase() {
        countryId.removeAllItems(); // Clear the combo box
        countryIds.clear(); // Clear the ID list

        String query = "SELECT CountryID AS ID, CountryName FROM Countries";
        try (PreparedStatement statement = con.prepareStatement(query); ResultSet resultSet = statement.executeQuery()) {
            while (resultSet.next()) {
                int id = resultSet.getInt("ID"); // ID column (e.g., CategoryID, ConditionID)
                String name = resultSet.getString("CountryName"); // Name column (e.g., CategoryName, ConditionName)

                countryIds.add(id); // Store the ID in the ArrayList
                countryId.addItem(name); // Add the name to the combo box
            }
        } catch (SQLException ex) {
            Logger.getLogger(Items.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error populating combo box!");
        }
    }

    //show items
    private void PopulateSuppliersWithDatabase() {
        selectSupplier.removeAllItems(); // Clear the combo box
        supplierIds.clear(); // Clear the ID list

        String query = "SELECT SupplierID AS ID, SupplierName FROM Suppliers";
        try (PreparedStatement statement = con.prepareStatement(query); ResultSet resultSet = statement.executeQuery()) {
            while (resultSet.next()) {
                int id = resultSet.getInt("ID"); // ID column (e.g., CategoryID, ConditionID)
                String name = resultSet.getString("SupplierName"); // Name column (e.g., CategoryName, ConditionName)

                supplierIds.add(id); // Store the ID in the ArrayList
                selectSupplier.addItem(name); // Add the name to the combo box
            }
        } catch (SQLException ex) {
            Logger.getLogger(Items.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error populating combo box!");
        }
    }

    //clear the text fields:
    private void clearFields() {
        SupplierName.setText(""); // Clear product name
        AddressDetails.setText(""); // Clear address
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */

 /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                Supplier s = new Supplier();
                s.setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea AddressDetails;
    private javax.swing.JButton ConfirmButton;
    private javax.swing.JButton DeleteButton;
    private javax.swing.JButton EditButton;
    private javax.swing.JTextField SupplierContactInfo;
    private javax.swing.JTextField SupplierName;
    private javax.swing.JButton addParts;
    private javax.swing.JComboBox<String> countryId;
    private javax.swing.JButton goHome;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> selectSupplier;
    // End of variables declaration//GEN-END:variables
}
